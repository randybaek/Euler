import problem.Prob008
(1 to 3).map(e => e + 1)
(1 to 3).map( _ + 1)

val input =
  "7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450"
input.length

// ! max value of Int is 2^32 which is less than 9^17, so Int is not proper.
findGreatestProductOfNAdjacentDigits_clean(input, 13)


def findGreatestProductOfNAdjacentDigits(input: String, n: Int ) = {
  // naive way
  (0 to input.length - n  ) // ( 0, 1, 2... ,n -1)
    //.map(start => (start to start + n -1)) // ( ( range1, range2, range3, ...)
    .sliding(n)
    .map(range => range.map(idx => input.charAt(idx).asDigit.toLong)) //  ( (elems) , (elems), ... )
    .map(elem => elem.product) // ( multiple, multiple, ... )
    .reduceLeft(_ max _)

}

def findGreatestProductOfNAdjacentDigits_clean(input:String, n: Int) =
  input.map(_.asDigit.toLong).sliding(n).map(_.product).max


// or do b.charAt(0).toInt - 48
val b = "12"
b.charAt(0).asDigit



val a = 2
(1 to a + 3 - 1)

